type Query {
  #general medicine
  getAllGeneralMedicineRequest: [BaseEntity]
  getOneGeneralMedicineRequest (id: ID!): BaseEntity

  #gynecology
  getAllGynecologyRequest: [BaseEntity]
  getOneGynecologyRequest (id: ID!): BaseEntity

  #odontology
  getAllOdontologyRequest: [BaseEntity]
  getOneOdontologyRequest (id: ID!): BaseEntity

  #optometry
  getAllOptometryRequest: [BaseEntity]
  getOneOptometryRequest (id: ID!): BaseEntity

  #pediactrics
  getAllPediatricsRequest: [BaseEntity]
  getOnePediatricsRequest (id: ID!): BaseEntity

  #psychiatry
  getAllPsychiatryRequest: [BaseEntity]
  getOnePsychiatryRequest (id: ID!): BaseEntity

  #user
  getAllUsersRequest: [UserEntity]
  getOneUserRequest (id: ID!): UserEntity
}

type Mutation {
  #login
  login (email: String!, password: String!): UserEntityAuth

  #general medicine
  createGeneralMedicineRequest (dto: CreateBaseRequest!): BaseEntity!
  updateGeneralMedicineRequest (id: ID!, dto: UpdateBaseRequest!): String 
  deleteGeneralMedicineRequest (id: ID!): String

  #gynecology
  createGynecologyRequest (dto: CreateBaseRequest!): BaseEntity!
  updateGynecologyRequest (id: ID!, dto: UpdateBaseRequest!): String 
  deleteGynecologyRequest (id: ID!): String

  #gynecology
  createOdontologyRequest (dto: CreateBaseRequest!): BaseEntity!
  updateOdontologyRequest (id: ID!, dto: UpdateBaseRequest!): String 
  deleteOdontologyRequest (id: ID!): String

  #optometry
  createOptometryRequest (dto: CreateBaseRequest!): BaseEntity!
  updateOptometryRequest (id: ID!, dto: UpdateBaseRequest!): String 
  deleteOptometryRequest (id: ID!): String

  #pediatrics
  createPediatricsRequest (dto: CreateBaseRequest!): BaseEntity!
  updatePediatricsRequest (id: ID!, dto: UpdateBaseRequest!): String 
  deletePediatricsRequest (id: ID!): String

  #psychiatry
  createPsychiatryRequest (dto: CreateBaseRequest!): BaseEntity!
  updatePsychiatryRequest (id: ID!, dto: UpdateBaseRequest!): String 
  deletePsychiatryRequest (id: ID!): String

  #user
  createUsersRequest (dto: CreateUserRequest!): UserEntity!
  updateUsersRequest (id: ID!, dto: UpdateUserRequest!): String 
  deleteUsersRequest (id: ID!): String
}

type BaseEntity {
  id: String!,
  typeService: String!,
  registryNumber: Int!,
  firstName: String!,
  lastName: String!,
  email: String!,
  eps: String!,
  department: String!,
  city: String!,
  medicalCenter: String!,
  date: String!,
  hour: String!,
  doctor: String!,
  patientStatus: String!,
  status: String!,
}

type UserEntity {
  id: ID!,
  name: String!,
  email: String!,
  password: String!,
  createdAt: String!,
  role: String!,
}

type UserEntityAuth { 
  user: UserEntity,
  access_token: String
}

input CreateBaseRequest {
  typeService: String!,
  registryNumber: Int!,
  firstName: String!,
  lastName: String!,
  email: String!,
  eps: String!,
  department: String!,
  city: String!,
  medicalCenter: String!,
  date: String!,
  hour: String!,
  doctor: String!,
  patientStatus: String!,
  status: String,
}

input UpdateBaseRequest {
  typeService: String,
  registryNumber: Int,
  firstName: String,
  lastName: String,
  email: String,
  eps: String,
  department: String,
  city: String,
  medicalCenter: String,
  date: String,
  hour: String,
  doctor: String,
  patientStatus: String,
  status: String,
}

input CreateUserRequest {
  name: String!,
  email: String!,
  password: String!,
  createdAt: String!,
  role: String!,
}

input UpdateUserRequest {
  name: String,
  email: String,
  password: String,
  createdAt: String,
  role: String,
}