type Query {
  #general medicine
  getAllGeneralMedicine: [BaseEntity]
  getOneGeneralMedicine (id: ID!): BaseEntity

  #gynecology
  getAllGynecology: [BaseEntity]
  getOneGynecology (id: ID!): BaseEntity

  #odontology
  getAllOdontology: [BaseEntity]
  getOneOdontology (id: ID!): BaseEntity

  #optometry
  getAllOptometry: [BaseEntity]
  getOneOptometry (id: ID!): BaseEntity

  #pediactrics
  getAllPediatrics: [BaseEntity]
  getOnePediatrics (id: ID!): BaseEntity

  #psychiatry
  getAllPsychiatry: [BaseEntity]
  getOnePsychiatry (id: ID!): BaseEntity

  #user
  getAllUsers: [UserEntity]
  getOneUser (id: ID!): UserEntity
}

type Mutation {
  #general medicine
  createGeneralMedicine (dto: CreateBaseRequest!): BaseEntity!
  updateGeneralMedicine (id: ID!, dto: UpdateBaseRequest!): String 
  deleteGeneralMedicine (id: ID!): String

  #gynecology
  createGynecology (dto: CreateBaseRequest!): BaseEntity!
  updateGynecology (id: ID!, dto: UpdateBaseRequest!): String 
  deleteGynecology (id: ID!): String

  #gynecology
  createOdontology (dto: CreateBaseRequest!): BaseEntity!
  updateOdontology (id: ID!, dto: UpdateBaseRequest!): String 
  deleteOdontology (id: ID!): String

  #optometry
  createOptometry (dto: CreateBaseRequest!): BaseEntity!
  updateOptometry (id: ID!, dto: UpdateBaseRequest!): String 
  deleteOptometry (id: ID!): String

  #pediatrics
  createPediatrics (dto: CreateBaseRequest!): BaseEntity!
  updatePediatrics (id: ID!, dto: UpdateBaseRequest!): String 
  deletePediatrics (id: ID!): String

  #psychiatry
  createPsychiatry (dto: CreateBaseRequest!): BaseEntity!
  updatePsychiatry (id: ID!, dto: UpdateBaseRequest!): String 
  deletePsychiatry (id: ID!): String

  #user
  createUsers (dto: CreateUserRequest!): UserEntity!
  updateUsers (id: ID!, dto: UpdateUserRequest!): String 
  deleteUsers (id: ID!): String
}

type BaseEntity {
  id: String!,
  typeService: String!,
  registryNumber: Int!,
  firstName: String!,
  lastName: String!,
  email: String!,
  eps: String!,
  department: String!,
  city: String!,
  medicalCenter: String!,
  date: String!,
  hour: String!,
  doctor: String!,
  patientStatus: String!,
  status: String!,
}

type UserEntity {
  id: ID!,
  name: String!,
  email: String!,
  password: String!,
  createdAt: String!,
  role: String!,
}

input CreateBaseRequest {
  typeService: String!,
  registryNumber: Int!,
  firstName: String!,
  lastName: String!,
  email: String!,
  eps: String!,
  department: String!,
  city: String!,
  medicalCenter: String!,
  date: String!,
  hour: String!,
  doctor: String!,
  patientStatus: String!,
  status: String,
}

input UpdateBaseRequest {
  typeService: String,
  registryNumber: Int,
  firstName: String,
  lastName: String,
  email: String,
  eps: String,
  department: String,
  city: String,
  medicalCenter: String,
  date: String,
  hour: String,
  doctor: String,
  patientStatus: String,
  status: String,
}

input CreateUserRequest {
  name: String!,
  email: String!,
  password: String!,
  createdAt: String!,
  role: String!,
}

input UpdateUserRequest {
  name: String,
  email: String,
  password: String,
  createdAt: String,
  role: String,
}