type Query {
  hello: String
  getPerson(name: String, age: Int): String
  
  #general medicine
  getAllGeneralMedicine: [BaseEntity]
  getOneGeneralMedicine (id: ID!): BaseEntity
}

type Mutation {
  #general medicine
  createGeneralMedicine (dto: CreateBaseRequest!): BaseEntity!
  updateGeneralMedicine (id: ID!, dto: UpdateBaseRequest!): String 
  deleteGeneralMedicine (id: ID!): String
}

type BaseEntity {
  id: String!,
  typeService: String!,
  registryNumber: Int!,
  firstName: String!,
  lastName: String!,
  email: String!,
  eps: String!,
  department: String!,
  city: String!,
  medicalCenter: String!,
  date: String!,
  hour: String!,
  doctor: String!,
  patientStatus: String!,
  status: String!,
}

input CreateBaseRequest {
  typeService: String!,
  registryNumber: Int!,
  firstName: String!,
  lastName: String!,
  email: String!,
  eps: String!,
  department: String!,
  city: String!,
  medicalCenter: String!,
  date: String!,
  hour: String!,
  doctor: String!,
  patientStatus: String!,
  status: String,
}

input UpdateBaseRequest {
  typeService: String,
  registryNumber: Int,
  firstName: String,
  lastName: String,
  email: String,
  eps: String,
  department: String,
  city: String,
  medicalCenter: String,
  date: String,
  hour: String,
  doctor: String,
  patientStatus: String,
  status: String,
}