type Query {
  #general medicine
  getAllGeneralMedicine: [BaseEntity]
  getOneGeneralMedicine (id: ID!): BaseEntity

  #gynecology
  getAllGynecology: [BaseEntity]
  getOneGynecology (id: ID!): BaseEntity

  #odontology
  getAllOdontology: [BaseEntity]
  getOneOdontology (id: ID!): BaseEntity
}

type Mutation {
  #general medicine
  createGeneralMedicine (dto: CreateBaseRequest!): BaseEntity!
  updateGeneralMedicine (id: ID!, dto: UpdateBaseRequest!): String 
  deleteGeneralMedicine (id: ID!): String

  #gynecology
  createGynecology (dto: CreateBaseRequest!): BaseEntity!
  updateGynecology (id: ID!, dto: UpdateBaseRequest!): String 
  deleteGynecology (id: ID!): String

  #gynecology
  createOdontology (dto: CreateBaseRequest!): BaseEntity!
  updateOdontology (id: ID!, dto: UpdateBaseRequest!): String 
  deleteOdontology (id: ID!): String
}

type BaseEntity {
  id: String!,
  typeService: String!,
  registryNumber: Int!,
  firstName: String!,
  lastName: String!,
  email: String!,
  eps: String!,
  department: String!,
  city: String!,
  medicalCenter: String!,
  date: String!,
  hour: String!,
  doctor: String!,
  patientStatus: String!,
  status: String!,
}

input CreateBaseRequest {
  typeService: String!,
  registryNumber: Int!,
  firstName: String!,
  lastName: String!,
  email: String!,
  eps: String!,
  department: String!,
  city: String!,
  medicalCenter: String!,
  date: String!,
  hour: String!,
  doctor: String!,
  patientStatus: String!,
  status: String,
}

input UpdateBaseRequest {
  typeService: String,
  registryNumber: Int,
  firstName: String,
  lastName: String,
  email: String,
  eps: String,
  department: String,
  city: String,
  medicalCenter: String,
  date: String,
  hour: String,
  doctor: String,
  patientStatus: String,
  status: String,
}